/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
// import StartScreenButton from '../StartScreenButton/StartScreenButton.js'


//ANIMATIONS
import { a, useSpring } from "react-spring";
import { gsap } from "gsap";

export default function Model(props) {
  const group = useRef()
  const testGsap = useRef()
  const gsapWalls = useRef()
  const gsapEkran = useRef()
  const gsapText = useRef()
  const gsapFrameInvisibleAtFirst = useRef()
  const { nodes, materials, animations } = useGLTF('./animatedFrame4.glb')
  const { actions } = useAnimations(animations, group)
  const [animating, toggleAnimating] = useState(false)
  const [showRestAllMesh, toggleShowRestAllMesh] = useState(false)


  ////////////////////////////////////////////////////////HOVER ANIMATION
  const [hovered, setHovered] = useState(false)

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto';

    return () => document.body.style.cursor = 'auto';
  }, [hovered])


  ////////////////////////////////////////////////////// HANDLE CLICK

  const handleClick = () => {

    if (animating) {
      actions['enterPortal'].paused = true;
    } else {
      //ANIMATION PLAYS
      console.log('ding')
      console.log(animations)
      actions['enterPortal'].repetitions = 0;
      actions['enterPortal'].clampWhenFinished = true;
      actions['enterPortal'].setDuration(2)
      actions['enterPortal'].play();
      toggleAnimating(true);

      props.setStartScreenEnded(true)

      //KILL LOOP ANIMATION -- as always doesnt work
      loopAnimation.pause();
      // loopAnimation = null;
    
    //EKRAN
    gsap.to(gsapEkran.current, 
              {
                duration: 1.1,
                ease: "power1.in",
                emissiveIntensity: .8 ,
                opacity:.8 ,
              }    
    )
      
    //FRAMES
    gsap.fromTo(gsapFrameInvisibleAtFirst.current, 
      {
        emissiveIntensity:1.7,
        opacity:.2,
        roughness:1,
        radius:.5,
        duration: .3,
        ease: "power1.in",
      },
      {
        opacity:1,
        roughness:0,
        radius:.5,
        duration: .3
      },
    )

    //WALLS
    const masterWalls = gsap.timeline();

    masterWalls.to(gsapWalls.current, 
      {       
        opacity:.1,
        duration: .8,
        ease: "power1.in",
      },
    )
    .to(gsapWalls.current, 
        { 
          opacity:1,
          emissiveIntensity: 8,
          duration: 2,
          
        }
      )

    //TEXT
    gsap.to(gsapText.current, 
        { 
          delay: .5,
          color: 'rgba(255,255,255,0)',
          fontSize: '30rem',
          duration: .8,
          ease: "power1.in",
          opacity: 0,
        },

      )
    }
    // props.setStartPortal(true)
  }

  ////////////////////////////////////////////////////// LOOP ANIMATION

  let loopAnimation = gsap.timeline({repeat:-1, yoyo:true});

  

  // useEffect(() => {

  //   // /gsapFrameInvisibleAtFirst
  //   loopAnimation.fromTo(
  //     gsapFrameInvisibleAtFirst.current, 
  //       {
  //         opacity:0,

  //         duration: .5,
  //         ease: "power1.in",
  //         delay: 1,
  //       },
  //       {
          
          
  //         opacity:.01,

  //         delay: 1,
  //         duration: .5
  //       },
        
  //   )
  // }, [])

  ////////////////////////////////////////////////////// ON HOVER

  const meshShow = (val) => {
    // console.log(`showRestAllMesh changed to ${val}`)
    toggleShowRestAllMesh(val)

    //set hover
    setHovered(val)


  }


  ////////////////////////////////////////////////////////USE SPRING ANIMATIONS
  const propsy = useSpring({opacity: toggleShowRestAllMesh ? 1 : 0})

  

//   gsap.to(gsapWalls.current, 
//                 {opacity: 1, duration: 15}
//     )

//     gsap.to(gsapFrameInvisibleAtFirst.current, 
//       {opacity: 1, duration: 1}
// )

  return (
    <>
      {/* <mesh>
          <planeBufferGeometry args={[2,3,2]} />
          
          <Html className='noEvents' position={[0, 0.05, -0.09]}     center     >
              <div  className='noEvents'  onPointerOver={() => {console.log('KURWAAA OVER'); }} onPointerEnter={() => {console.log('KURWAAA ENTER'); }} >co jest kurwa</div>
          </Html>
      </mesh> */}
      <group onClick={handleClick} onPointerEnter={() => {meshShow(true)} } onPointerOut={(e) => {  meshShow(false) }} ref={group} {...props} dispose={null}>

          <group name="Armature"  position={[0, 0, 4.13]} rotation={[0, 0, 0]}>
            <primitive object={nodes.Bone} />
            <group name="forExport">
              <skinnedMesh name="Plane006" geometry={nodes.Plane006.geometry} material={materials.frameMaterial} skeleton={nodes.Plane006.skeleton} >
                <meshStandardMaterial emissive={'#00A8FF'} emissiveIntensity={1.7}  roughness={0} radius={.5} />
              </skinnedMesh>
              <skinnedMesh name="Plane006_1" geometry={nodes.Plane006_1.geometry} material={materials.frameInvisibleAtFirst} skeleton={nodes.Plane006_1.skeleton} >
                <meshStandardMaterial ref={gsapFrameInvisibleAtFirst} emissive={'#00A8FF'} emissiveIntensity={1.7} transparent opacity={0}
                 
                
                 />

                {/* <meshStandardMaterial ref={gsapFrameInvisibleAtFirst} emissive={'#00A8FF'} emissiveIntensity={1.7} transparent 
                 
                 opacity={0}
                 roughness={0} 
                 radius={.5}
                 // opacity={(showRestAllMesh ? 1 : 0)} 
                  /> */}
              </skinnedMesh>


              {/* ================= HTML EKRAN TUTAJ */}


              <skinnedMesh  name="Plane006_2" geometry={nodes.Plane006_2.geometry} material={materials.ekran} skeleton={nodes.Plane006_2.skeleton} >
                <meshStandardMaterial ref={gsapEkran}
                  emissive={'#fff'}  
                  emissiveIntensity={5} 
                  transparent 
                  opacity={0}
                  // opacity={.3} 
                  roughness={0} 
                  radius={.5} 
                  // opacity={(showRestAllMesh ? .3 : 0)} 
                   
                  />
                <Html className='noEvents' position={[0, 0.05, -.3]} center    >
                  {/* <div  className='noEvents'  onPointerOver={() => {console.log('KURWAAA OVER'); }} onPointerEnter={() => {console.log('KURWAAA ENTER'); }} >co jest kurwa</div> */}
                  {/* <StartScreenButton ref={gsapText} /> */}
                </Html>
              </skinnedMesh>
              <skinnedMesh name="Plane006_3" geometry={nodes.Plane006_3.geometry} material={materials['walls.001']} skeleton={nodes.Plane006_3.skeleton} >
                <meshStandardMaterial ref={gsapWalls} emissive={'#00A8FF'} emissiveIntensity={1} transparent 
                // opacity={(showRestAllMesh ? .1 : 0)} 
                opacity={0}
                roughness={0} radius={1} />
              </skinnedMesh>
            </group>
          </group>
      </group>
    </>
  )
}
useGLTF.preload('./animatedFrame4.glb')
